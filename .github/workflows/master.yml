name: ci

on:
  push:
    branches:
      - 'master'

jobs:
  docker:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2

      - name: Configurar AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-2

      - name: Login a AWS ECR
        run: |
          aws ecr get-login-password --region eu-west-2 | docker login --username AWS --password-stdin 438930360577.dkr.ecr.eu-west-2.amazonaws.com

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Construir, etiquetar y subir imagen a AWS ECR
        uses: docker/build-push-action@v5
        with:
          context: .
          file: Dockerfile
          push: true
          tags: 438930360577.dkr.ecr.eu-west-2.amazonaws.com/vispotify:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Construir, etiquetar y subir imagen a AWS ECR
        uses: docker/build-push-action@v5
        with:
          context: ./server
          file: ./server/Dockerfile
          push: true
          tags: 438930360577.dkr.ecr.eu-west-2.amazonaws.com/vispotify-server:latest
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,dest=/tmp/.buildx-cache

      - name: Tailscale
        uses: tailscale/github-action@v2
        with:
          oauth-client-id: ${{ secrets.TS_OAUTH_CLIENT_ID }}
          oauth-secret: ${{ secrets.TS_OAUTH_SECRET }}
          tags: tag:ci

      - name: Establecer conexi√≥n SSH
        uses: webfactory/ssh-agent@v0.5.3
        with:
          ssh-private-key: ${{ secrets.STAGING_HS_KEY }}

      - name: Conectar al droplet y desplegar
        run: |
          ssh -o StrictHostKeyChecking=no root@${{ secrets.STAGING_HS_IP }} 'cd /home/develop/opt/registryContainers && docker-compose pull vispotify_app && docker-compose up -d vispotify_app'
          ssh -o StrictHostKeyChecking=no root@${{ secrets.STAGING_HS_IP }} 'cd /home/develop/opt/registryContainers && docker-compose pull vispotify_server && docker-compose up -d vispotify_server'
